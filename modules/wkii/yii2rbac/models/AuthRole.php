<?php

namespace Wkii\Yii2Rbac\models;

use yii\data\ActiveDataProvider;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "yii2rbac_role".
 *
 * @property integer $role_id
 * @property string $role_name
 * @property string $description
 * @property integer $status
 * @property integer $create_time
 */
class AuthRole extends \yii\db\ActiveRecord
{

    const STATUS_INVALID = 0;
    const STATUS_ACTIVE = 1;

    //状态枚举
    public static $statusEnum = [
        self::STATUS_ACTIVE => "激活",
        self::STATUS_INVALID => "无效"
    ];
    // 创建场景
    const SCENARIO_CREATE = 'create';
    // 更新场景
    const SCENARIO_UPDATE = 'update';

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'yii2rbac_role';
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios[self::SCENARIO_CREATE] = ['role_name','weight','status','create_time','description'];
        $scenarios[self::SCENARIO_UPDATE] = ['role_name','weight','status','create_time','description'];
        return $scenarios;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['role_name', 'weight'], 'required'],
            [['status', 'create_time', 'weight'], 'integer'],
            [['weight'],'compare', 'compareValue'=>999, 'operator' => '<=','message'=>'{attribute} 范围1-999'],
            [['weight'],'compare', 'compareValue'=>1, 'operator' => '>=', 'message'=>'{attribute} 范围1-999'],
            [['role_name'], 'string', 'max' => 45],
            [['description'], 'string', 'max' => 200],
            [['role_name'], 'unique']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'role_id' => 'Role ID',
            'role_name' => '角色名称',
            'description' => '描述',
            'status' => '状态',
            'weight' => '权重值',
            'create_time' => '创建时间',
        ];
    }

    /**
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->create_time = time();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * 用户查询所有角色
     * @param array $attributes
     * @param int  $pageSize
     * @return ActiveDataProvider
     */
    public function search($attributes, $pageSize = 15)
    {
        $query = self::find();

        $this->load($attributes);

        $query->andFilterWhere([
            'and',
            ["like", 'role_name', $this->role_name],
            'status' => $this->status,
            ['<=','weight',$this->weight],
        ]);

        return new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => $pageSize
            ]
        ]);
    }

    /**
     * 通过传入用户角色的ID,获取ID的名称, 该参数可以是一个ID也可以是个ID的数组
     * @param int|array $ids    用户角色ID或者ID数组
     * @return array
     * [
     *  'role_id' => 'role_name',
     *  'role_id' => 'role_name'
     * ]
     */
    public function getRolesByIds($ids)
    {
        $result = self::find()->select(['role_id', 'role_name'])->where(['role_id' => $ids])->asArray()->all();

        return ArrayHelper::map($result, 'role_id', 'role_name');
    }

    /**
     * 删除角色,以及删除角色与用户的所有关联和角色与任务之间的关联
     * 内部会开启事物
     * @param int|array $id 用户角色ID
     * @return bool
     * @throws \yii\db\Exception
     */
    public function deleteRole($id)
    {
        $transaction = $this->getDb()->beginTransaction();

        try {
            $this->deleteAll(['role_id' => $id]);
            UserRole::deleteAll(['role_id' => $id]);
            RoleTask::deleteAll(['role_id' => $id]);
            $transaction->commit();
            return true;
        } catch (\Exception $e) {
            $transaction->rollBack();
        }

        return false;
    }
}
