<?php

namespace Wkii\Yii2Rbac\models;

use Wkii\Yii2Rbac\helpers\PhpDoc;
use Yii;
use yii\data\ActiveDataProvider;
use yii\helpers\ArrayHelper;
use yii\helpers\Inflector;

/**
 * This is the model class for table "yii2rbac_auth_item".
 *
 * @property integer $item_id
 * @property string $item_name
 * @property integer $platform_id
 * @property string $module
 * @property string $controller
 * @property string $action
 * @property string $description
 * @property integer $type
 * @property integer $allowed
 * @property string $bizrule
 */
class AuthItem extends \yii\db\ActiveRecord
{

    const SCENARIO_SCAN_CREATE = 'scan-create';

    const SCENARIO_HAND_CREATE = 'hand-create';


    //权限类型
    const TYPE_OPERATION = 1;
    const TYPE_CUSTOMER = 2;
    const TYPE_DATA = 3;
    //权限类型枚举
    public static $typeEnum = [
        self::TYPE_OPERATION => "操作权限",
        self::TYPE_CUSTOMER => "数据权限",
        self::TYPE_DATA => "自定义权限"
    ];
    //是否始终与许枚举
    public static $allowedEnum = [
        0 => "否",
        1 => "是"
    ];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'yii2rbac_auth_item';
    }

    public function scenarios()
    {
        $result = parent::scenarios();
        $result[self::SCENARIO_SCAN_CREATE] = ['item_name', 'platform_id', 'type', 'allowed', 'module', 'controller', 'action', 'description', 'bizrule'];
        $result[self::SCENARIO_SCAN_CREATE] = ['item_name', 'platform_id', 'type', 'allowed', 'module', 'controller', 'action', 'description', 'bizrule'];
        return $result;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['item_name'], 'required'],
            [['platform_id', 'type', 'allowed'], 'integer'],
            [['item_name'], 'string', 'max' => 100],
            [['module', 'controller'], 'string', 'max' => 200],
            [['action'], 'string', 'max' => 45],
            [['description'], 'string', 'max' => 150],
            [['bizrule'], 'string', 'max' => 200],
            [['item_name', 'platform_id'], 'unique', 'targetAttribute' => ['item_name', 'platform_id'], 'message' => 'The combination of Item Name and Platform has already been taken.']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'item_id' => 'Item ID',
            'item_name' => '权限名称',
            'platform_id' => '平台',
            'module' => '模块名称',
            'controller' => '控制器',
            'action' => '行为',
            'description' => '描述',
            'type' => '类型',
            'allowed' => '始终允许',
            'bizrule' => '权限表达式',
        ];
    }

    public function beforeValidate()
    {
        $this->platform_id = $this->platform_id ? : Yii::$app->controller->module->platformId;
        $this->item_name = $this->item_name ? : self::format($this->controller, $this->action);

        if ($this->getScenario() == self::SCENARIO_SCAN_CREATE) {
            if (!self::enableController($this->controller)) {
                $this->addError('controller', '不存在的授权项目控制器');
            }
            if (!self::enableAction($this->controller, $this->action)) {
                $this->addError('action', '不存在的授权项目');
            }
        }


        return !self::hasErrors() && parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    /**
     * 查询所有授权项目
     * @param $attributes
     * @return ActiveDataProvider
     */
    public function search($attributes)
    {
        $query = self::find()->with('platform');

        $this->load($attributes);

        $query->andFilterWhere([
            'AND',
            ['LIKE' , 'item_name', $this->item_name]
        ]);

        return $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort' => false
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPlatform()
    {
        return $this->hasOne(Platform::className(), ['platform_id' => 'platform_id']);
    }


    /**
     * 遍历目录下所有文件
     * 1. 查询所有应用对应的控制器,并且除去哪些配置文件中排除的
     * 2. 获取对应的modules除去已经在配置文件中排除的modules
     * 3. 获取modules对应的控制器
     * 扫描 Controller 的时候,会进行递归扫描,将所有的 Controller 扫描出来
     *
     * @return array
     * 样例:
     * [
     *  'sys\controllers\TestController',
     *  'sys\controllers\CustomDir\TestController',
     *  'moduleID' => [
     *      'module\controllers\TestController',
     *      'module\controllers\CustomDir\TestController'
     *  ]
     * ]
     */
    public function getControllers()
    {
        $result = [];
        //获取应用的控制器, 排出module中配置需要排除的
        $result = array_diff(self::scanController(null, Yii::$app->controllerPath), Yii::$app->controller->module->exceptControllers());

        //扫描module下的控制器, 获取可以进行扫描的modules,进行扫描
        $modules = Yii::$app->getModules();
        if (!empty($modules)) {
            foreach ($modules as $module) {
                if (!is_object($module)) {
                    continue;
                }
                // yii 的 gii 和 debug 两个module忽略掉
                if ($module->id == 'gii' || $module->id == 'debug') {
                    continue;
                }
                if (in_array($module->id, Yii::$app->controller->module->exceptModules())) {
                    continue;
                }
                $result[$module->id] = array_diff($this->scanController($module, $module->controllerPath), Yii::$app->controller->module->exceptControllers());
            }
        }

        return $result;
    }

    /**
     * 返回目录下所有控制器文件,遍历$path目录中文件,通过正则表达式进行匹配过滤
     * 如果是PHP文件则添加到返回值中,如果是文件夹,则进行递归遍历
     * @param string|null $module
     * @param $path
     * @return array
     * 样例:
     * [
     *   'sys\controllers\TestController',
     *   'sys\controllers\CustomDir\TestController',
     * ]
     */
    protected function scanController($module, $path)
    {
        $result = [];

        if (!is_dir($path)) {
            return $result;
        }

        $realPath = realpath($path);
        foreach (scandir($realPath) as $filename) {
            if ($filename == '.' || $filename == '..') {
                continue;
            }
            $tempFile = $realPath . DIRECTORY_SEPARATOR . $filename;
            if (is_file($tempFile) && preg_match("/^(.+)Controller.php$/", $filename)) {
                $basePath = ($module == null ? realpath(Yii::$app->controllerPath) : realpath($module->controllerPath)) . DIRECTORY_SEPARATOR;
                $relativeClassName = str_replace([$basePath, ".php"], "", $tempFile);
                $controllerName = self::getControllerFullName($module, $relativeClassName);
                array_push($result, $controllerName);
            }
            //如果是目录,进行递归遍历
            if (is_dir($tempFile)) {
                $files = self::scanController($module, $tempFile);
                $result = ArrayHelper::merge($result, $files);
            }
        }

        sort($result, SORT_STRING|SORT_FLAG_CASE);
        return $result;
    }

    /**
     * 根据模块ID和控制器名称,获取控制器全名称,
     * =========注意=================
     * 跟平台有关系,如果平台换成了console那么,命名空间就换成了console的命名空间
     * @param string|\yii\base\Module|null $module
     * @param string $controller  相对controllers目录的文件名称,
     * 例如controllers目录下的test目录中的TestController,
     * 应传入的值:'test\TestController'
     * @return string
     */
    public function getControllerFullName($module, $controller)
    {
        //替换$class路径分隔符好,转换成右斜线
        $controller = str_replace(DIRECTORY_SEPARATOR, "\\", $controller);
        if ($module == null) {
            return Yii::$app->controllerNamespace . "\\" . $controller;
        } elseif(is_object($module)) {
            return $module->controllerNamespace . "\\" . $controller;
        }
        return Yii::$app->getModule($module)->controllerNamespace . "\\" . $controller;
    }

    /**
     * 根据控制器名称和模块名称,查询出对应的类中action的方法,需要排出配置actions
     * @param string $controller 带有命名空间的控制器名称,例如:\sys\controllers\HelpController
     * @return array
     */
    public function scanActions($controller)
    {
        $result = [];

        if (!self::enableController($controller)) {
            $this->addError("controller", "控制器不存在");
            return $result;
        }
        $exceptControllers = Yii::$app->controller->module->exceptControllers();

        if (in_array($controller, $exceptControllers)) {
            return $result;
        }

        $refleactor = new \ReflectionClass($controller);

        $actionMethods = $refleactor->getMethods(\ReflectionMethod::IS_PUBLIC);

        //获取module配置的的需要排出的action
        $exceptActions = Yii::$app->controller->module->exceptActions();

        foreach ($actionMethods as $method) {
            //排出模块配置的actions
            if (in_array(self::format($controller, $method->name), $exceptActions)) {
                continue;
            }
            if ($method->name != "actions" && !$method->isStatic() && preg_match("/^action[A-Za-z0-9]+$/", $method->name)) {
                array_push($result, $method->name);
            }
        }

        return $result;
    }

    /**
     * 通过controller参数查询数据库中存在了哪些授权项目, 仅限于本平台
     * @param $controller
     * @return array
     */
    public function hasItems($controller)
    {
        $result = self::find()
            ->filterWhere(["controller" => $controller])
            ->asArray()->all();

        return ArrayHelper::index($result, 'item_id');
    }

    /**
     * 通过controller参数查询数据库中存在了哪些action
     * @param string $controller 带有命名空间的控制器名称,例如:\sys\controllers\HelpController
     * @return array
     */
    public function hasActions($controller)
    {
        $result = self::hasItems($controller);

        return ArrayHelper::map($result, 'item_id', 'action');
    }

    /**
     * 获取所有授权项目
     * @return array|\yii\db\ActiveRecord[]
     */
    public function getAllItems()
    {
        return self::find()->select(['item_id', 'item_name', 'platform_id','module', 'controller', 'action', 'description'])
            ->with('platform')->all();
    }

    /**
     * 控制器是否存在
     * @param $controller
     * @return bool
     */
    public function enableController($controller)
    {
        return class_exists($controller);
    }

    /**
     * 判断action是否依然可以使用,
     * 通过判断action是否存在,来判断行为是否可以使用
     * @param string $controller 带有命名空间的控制器名称,例如:\sys\controllers\HelpController
     * @param $action
     * @return bool
     */
    public function enableAction($controller, $action)
    {
        return method_exists($controller, $action);
    }

    /**
     * 查询丢弃的行为
     * 通过从数据库获取所有的行为作为参数传入该方法,然后判断此时行为是否还存在
     * @param array $items
     * @return array
     */
    public function searchDirtyAction($items)
    {
        $result = [];

        foreach ($items as $item) {
            if (!self::enableAction($item['controller'], $item['action'])) {
                array_push($result, $item);
            }
        }

        return $result;
    }

    /**
     * 格式化$controller和$action,使其转换成可展示,可存储的字符串
     * 格式如下:
     * \sys\controllers\TestController\Test
     * \sys\controllers\dir\TestController\Test
     * 总归是:控制器命名空间\行为方法
     * @param string $controller 带有命名空间的控制器名称,例如:\sys\controllers\HelpController
     * @param string $action   除去'action'前缀的action方法
     * @return string
     */
    public function format($controller, $action = null)
    {
        $result = $controller;

        $result .= !empty($action) ? "\\" . $action : "";

        return $result;
    }

    /**
     * 获取对应控制器的备注说明
     * @param string $controller 带有命名空间的控制器名称,例如:\sys\controllers\HelpController
     * @return string
     */
    public function getControllerDoc($controller)
    {
        $phpDoc = new PhpDoc($controller);

        return nl2br(self::formatDoc($phpDoc->getClassDoc()));
    }

    /**
     * 获取对应控制器行为的备注说明
     * @param string $controller 带有命名空间的控制器名称,例如:\sys\controllers\HelpController
     * @param $action
     * @return string
     */
    public function getActionDoc($controller, $action)
    {
        $phpDoc = new PhpDoc($controller);

        return nl2br(self::formatDoc($phpDoc->getMethodDoc($action)));
    }

    /**
     * 格式化文档,使备注文档格式能够统一美化
     * @param $doc
     * @param int $width
     * @return string
     */
    private function formatDoc($doc, $width = 100)
    {
        $width = $width - 3;

        if (mb_strwidth($doc) > $width) {
            return mb_strimwidth($doc, 0, $width) . "...";
        }
        return $doc;
    }

    /**
     * 根据任务ID,查找出来角色对应的任务
     * @param int $id 任务
     * @param int $platform_id  平台ID
     * @return array
     * 样例:
     * [
     *  ['item_id' => 'item_name'],....
     * ]
     */
    public function allocatedItemByTaskID($id, $platform_id)
    {
        $tasks = self::find()->select([self::tableName() . '.item_id as item_id', 'item_name'])
            ->innerJoin(TaskItem::tableName(), self::tableName() . '.item_id' . "=" . TaskItem::tableName() . '.item_id')
            ->where([
                'task_id' => $id,
                'platform_id' => $platform_id
            ])
            ->orderBy(['controller' => SORT_ASC])
            ->asArray()->all();

        return ArrayHelper::map($tasks, 'item_id', 'item_name');
    }

    /**
     * 获取所有为分配的任务
     * @param int $id 任务
     * @param int $platform_id  平台ID
     * @return array
     * 样例:
     * [
     *  ['item_id' => 'item_name'],....
     * ]
     */
    public function unallocatedItem($id, $platform_id)
    {
        $tasks = self::find()->select([self::tableName() . '.item_id as item_id', 'item_name'])
            ->leftJoin(TaskItem::tableName(), [
                'and',
                self::tableName() . '.item_id' . "=" . TaskItem::tableName() . '.item_id',
                ['task_id' => $id]
            ])
            ->orderBy(['controller' => SORT_ASC])
            ->where([
                'task_id' => null,
                'allowed' => 0,
                'platform_id' => $platform_id
            ])->asArray()->all();

        return ArrayHelper::map($tasks, 'item_id', 'item_name');
    }

    /**
     * 删除项目,以及删除任务与项目之间的关联
     * 内部会开启事物
     * @param int|array $id   项目ID
     * @return bool
     * @throws \yii\db\Exception
     */
    public function deleteItem($id)
    {
        $transaction = $this->getDb()->beginTransaction();

        try {
            $this->deleteAll(['item_id' => $id]);
            TaskItem::deleteAll(['task_id' => $id]);
            $transaction->commit();
            return true;
        } catch (\Exception $e) {
            $transaction->rollBack();
        }

        return false;
    }
}
